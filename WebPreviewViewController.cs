// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;
using Foundation;
using WebKit;


namespace HugoHelper
{
	public partial class WebPreviewViewController : NSViewController, WebKit.IWKNavigationDelegate, INSWindowDelegate
	{
		public WebPreviewViewController (IntPtr handle) : base (handle)
		{
		}


		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			handleButtonState();

			desktopWebView.NavigationDelegate = this;
			mobileWebView.NavigationDelegate = this;

			NSNotificationCenter.DefaultCenter.AddObserver( Constants.serverFoundUrlNotificationKey.NSString(), note =>
			{
				Console.WriteLine( "fucking notification: " + note.UserInfo["url"] );
				goToUrl( note.UserInfo["url"].ToString() );
			} );
		}


		public override void ViewDidAppear()
		{
			base.ViewDidAppear();

			View.Window.Delegate = this;
		}


		[Export( "windowWillClose:" )]
		void windowWillClose( NSNotification note )
		{
			View.Window.Delegate = null;
			desktopWebView.NavigationDelegate = null;
			mobileWebView.NavigationDelegate = null;

			NSNotificationCenter.DefaultCenter.RemoveObserver( this );
		}


		~WebPreviewViewController()
		{
			Console.WriteLine( "hits dead" );
		}


		public void goToUrl( string url )
		{
			Console.WriteLine( "going to url: {0}", url );
			var req = new NSUrlRequest( NSUrl.FromString( url ) );
			desktopWebView.LoadRequest( req );
		}


		void handleButtonState()
		{
			backButton.Enabled = desktopWebView.CanGoBack && !desktopWebView.IsLoading;
			forwardButton.Enabled = desktopWebView.CanGoForward && !desktopWebView.IsLoading;
		}


		partial void onClickBackButton( NSObject sender )
		{
			desktopWebView.GoBack();
		}


		partial void onClickForwardButton( NSObject sender )
		{
			desktopWebView.GoForward();
		}


		[Export( "webView:didCommitNavigation:" )]
		void DidCommitNavigation( WKWebView webView, WebKit.WKNavigation navigation )
		{
			var oppositeWebView = webView == mobileWebView ? desktopWebView : mobileWebView;
			if( oppositeWebView.Url != webView.Url )
				oppositeWebView.LoadRequest( new NSUrlRequest( webView.Url ) );

			handleButtonState();
		}


		[Export( "webView:didFinishNavigation:" )]
		public virtual void DidFinishNavigation( WKWebView webView, WKNavigation navigation )
		{
			handleButtonState();
		}


		[Export( "webView:didStartProvisionalNavigation:" )]
		public virtual void DidStartProvisionalNavigation( WKWebView webView, WKNavigation navigation )
		{
			handleButtonState();
		}

	}
}
