// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using AppKit;


namespace HugoHelper
{
	public partial class WindowController : NSWindowController, INSTouchBarDelegate
	{
		LogViewController _logViewController;
		NSWindow _logViewWindow;

		ThemePickerViewController _popoverViewController;
		NSPopover _popover;

		public AppKit.NSToolbarItem startServerToolbarItemPublic { get { return startServerToolbarItem; } }


		public WindowController( IntPtr handle ) : base( handle )
		{}


		public override void WindowDidLoad()
		{
			ShouldCascadeWindows = false;
			Window.FrameAutosaveName = "MainWindow";
			base.WindowDidLoad();
		}


		[Export( "makeTouchBar" )]
		public NSTouchBar MakeTouchBar()
		{
			NSApplication.SharedApplication.SetAutomaticCustomizeTouchBarMenuItemEnabled( true );

			var del = new TouchBarDelegate();
			var touchBar = new NSTouchBar
			{
				Delegate = del
			};
			touchBar.DefaultItemIdentifiers = del.getDefaultIdentifiers();

			return touchBar;
		}


		partial void onSegmentedControlChanged( Foundation.NSObject sender )
		{
			var control = sender as AppKit.NSSegmentedControl;
			var app = NSApplication.SharedApplication.Delegate as AppDelegate;
			app.viewController.onSegmentedControlChanged( control );
		}


		partial void onClickStartServer( Foundation.NSObject sender )
		{
			AppDelegate.startStopServer( sender as NSToolbarItem );
		}


		partial void onClickReload( NSObject sender )
		{
			var app = NSApplication.SharedApplication.Delegate as AppDelegate;
			app.viewController.reloadDataSource();
		}


		partial void onClickNewBlogPost( NSToolbarItem sender )
		{
			var app = NSApplication.SharedApplication.Delegate as AppDelegate;
			app.addNewBlogPost();
		}


		partial void onClickThemePicker( NSObject sender )
		{
			if( _popoverViewController == null )
				_popoverViewController = Storyboard.InstantiateControllerWithIdentifier( "ThemePickerViewController" ) as ThemePickerViewController;
			
			if( _popover == null )
			{
				_popover = new NSPopover();
				_popover.ContentViewController = _popoverViewController;
				_popover.SetAppearance( NSAppearance.GetAppearance( NSAppearance.NameVibrantLight ) );
				_popover.Animates = true;
				_popover.Behavior = NSPopoverBehavior.Transient;
				_popover.WeakDelegate = this;

				var button = sender as NSButton;
				_popover.Show( button.Frame, button, NSRectEdge.MaxXEdge );
			}
		}


		public void closePopOver()
		{
			if( _popover != null )
				_popover.Close();
		}


		[Export( "popoverDidClose:" )]
		void popoverDidClose( NSNotification note )
		{
			Console.WriteLine( "done" );
			_popover = null;
		}
	

		public void showServerLogs()
		{
			if( _logViewController == null )
			{
				_logViewController = Storyboard.InstantiateControllerWithIdentifier( "LogViewController" ) as LogViewController;

				var frame = _logViewController.View.Bounds;
				var styleMask = NSWindowStyle.Titled | NSWindowStyle.Closable | NSWindowStyle.Resizable | NSWindowStyle.Borderless;
				var rect = NSWindow.ContentRectFor( frame, styleMask );

				var keyWindowFrame = NSApplication.SharedApplication.KeyWindow.Frame;
				rect.X = keyWindowFrame.X + keyWindowFrame.Width;
				rect.Y = keyWindowFrame.Y + keyWindowFrame.Height - rect.Height;

				_logViewWindow = new NSWindow( rect, styleMask, NSBackingStore.Buffered, false );
				_logViewWindow.Title = "Hugo Server Logs";
				_logViewWindow.ContentViewController = _logViewController;
				_logViewWindow.ReleasedWhenClosed = false;
			}

			_logViewWindow.MakeKeyAndOrderFront( _logViewWindow );
		}


		public void showWebViewPreview( string url = null )
		{
			WebPreviewViewController _webPreviewViewController = null;
			NSWindow _webPreviewWindow = null;
			if( _webPreviewViewController == null )
			{
				_webPreviewViewController = Storyboard.InstantiateControllerWithIdentifier( "WebPreviewViewController" ) as WebPreviewViewController;

				var frame = _webPreviewViewController.View.Bounds;
				var styleMask = NSWindowStyle.Titled | NSWindowStyle.Closable | NSWindowStyle.Resizable | NSWindowStyle.Borderless;
				var rect = NSWindow.ContentRectFor( frame, styleMask );

				var keyWindowFrame = NSApplication.SharedApplication.KeyWindow.Frame;
				rect.X = keyWindowFrame.X + keyWindowFrame.Width;
				rect.Y = keyWindowFrame.Y + keyWindowFrame.Height - rect.Height;

				_webPreviewWindow = new NSWindow( rect, styleMask, NSBackingStore.Buffered, false );
				_webPreviewWindow.Title = "Web Preview";
				_webPreviewWindow.ContentViewController = _webPreviewViewController;
				_webPreviewWindow.ReleasedWhenClosed = true;
			}

			_webPreviewWindow.MakeKeyAndOrderFront( _webPreviewWindow );

			if( url != null )
				_webPreviewViewController.goToUrl( url );
		}

	}
}
